Transcrição
Jacqueline: Nesse vídeo, começaremos o desafio de fazer várias buscas, colocá-las em uma lista, transformá-la em um arquivo .json, e por fim salvá-lo. Vamos por partes!

Nesse caso, faremos todo o processo no main(), mas o ideal é quebrar o código e fazer cada busca na sua devida classe.

Para isso, precisamos do nosso loop. Antes de realizar a ação "Digite um filme para busca", é necessário fazer uma repetição dela.

Paulo: Podemos fazer a repetição 5 vezes, por exemplo, ou inserir um break quando alguém digitar "sair" na busca.

O break é um comando para interromper um laço de repetição.

Existem muitas alternativas para fazer isso. Vamos utilizar 3 filmes como exemplo, e depois cada pessoa pode alterar conforme desejado.

Jacqueline: Exato! Antes da busca nas linhas de código 21 e 22, vamos declarar o nosso while. O objetivo é definir que, enquanto a variável busca for diferente de "sair", será solicitado um filme.

Utilizamos o método equals() para comparar textos. Nesse caso, vamos usar o equalsIgnoreCase() para que ele funcione independentemente de o texto ser digitado com letras maiúsculas ou minúsculas.

// Código suprimido.

public class PrincipalComBusca {
    public static void main(String[] args) throws IOException, InterruptedException {
        Scanner leitura = new Scanner(System.in);

        while (busca.equalsIgnoreCase("sair"))
        System.out.println("Digite um filme para busca: ");
        var busca = leitura.nextLine();

        String endereco = "https://www.omdbapi.com/?t=" + busca.replace(" ", "+") + "&apikey=coloque_sua_apikey";
        System.out.println(endereco);
        try {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(endereco))
                .build();
        HttpResponse<String> response = client
                .send(request, HttpResponse.BodyHandlers.ofString());Copiar código
Paulo: O método equals() é utilizado para comparar uma String com outra, correto?

Jacqueline: Isso!

Acima da declaração while, precisamos trazer a variável busca por meio da classe String. Vamos inicializá-la com valor vazio, ou seja, "".

// Código suprimido.

public class PrincipalComBusca {
    public static void main(String[] args) throws IOException, InterruptedException {
        Scanner leitura = new Scanner(System.in);
        String busca = "";

        while (busca.equalsIgnoreCase("sair"))
        System.out.println("Digite um filme para busca: ");
        var busca = leitura.nextLine();

// Código suprimido.Copiar código
Conforme dito anteriormente, queremos que seja solicitado um filme ("Digite um filme para busca:") enquanto a variável busca não for "sair". Para isso, precisamos negar a informação, então incluímos uma exclamação antes da variável busca na declaração while.

// Código suprimido.

public class PrincipalComBusca {
    public static void main(String[] args) throws IOException, InterruptedException {
        Scanner leitura = new Scanner(System.in);
        String busca = "";

        while (!busca.equalsIgnoreCase("sair"))
        System.out.println("Digite um filme para busca: ");
        var busca = leitura.nextLine();

// Código suprimido.Copiar código
Paulo: Utilizamos a exclamação porque não comparamos Strings com ==, correto?

Jacqueline: Exato! Assim, trazemos a situação em que a busca é diferente de "sair". Nesse caso, acontece tudo o que está entre as chaves, aberta na linha de código 23, após a declaração while, e fechada na linha 64 ao final do código, antes da mensagem de finalização do programa ("O programa finalizou corretamente!").

// Código suprimido.

public class PrincipalComBusca {
    public static void main(String[] args) throws IOException, InterruptedException {
        Scanner leitura = new Scanner(System.in);
        String busca = "";

        while (!busca.equalsIgnoreCase("sair")) {

            System.out.println("Digite um filme para busca: ");
            busca = leitura.nextLine();

            String endereco = "https://www.omdbapi.com/?t=" + busca.replace(" ", "+") + "&apikey=coloque_sua_apikey";
            System.outprintln(endereco);
            try {
                HttpClient client = HttpClient.newHttpClient();
                HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create(endereco))
                        .build();
                HttpResponse<String> response = client
                        .send(request, HttpResponse.BodyHandlers.ofString());

                String json = response.body();
                System.out.println(json);

                Gson gson = new GsonBuilder()
                        .setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE)
                        .create();

                TituloOmdb meuTituloOmdb = gson.fromJson(json, TituloOmdb.class);
                System.out.println(meuTituloOmdb);
                //try {
                Titulo meuTitulo = new Titulo(meuTituloOmdb);
                System.out.println("Titulo já convertido");
                System.out.println(meuTitulo);

                FileWriter escrita = new FileWriter("filmes.txt");
                escrita.write(meuTitulo.toString());
                escrita.close()
            } catch (NumberFormatException e) {
                System.out.println("Aconteceu um erro: ");
                System.out.println(e.getMessage());
            } catch (IllegalArgumentException e) {
                System.out.println("Algum erro de argumento na busca, verifique o endereço");
            } catch (ErroDeConversaoDeAnoException e) {
                System.out.println(e.getMessage());
            }

        }
        System.out.println("O programa finalizou corretamente!");


    }
}Copiar código
Paulo: Note que a indentação é feita automaticamente no código. Além disso, no topo da interface há uma indicação de que as chaves são abertas na declaração while da linha de código 23. Isso ajuda bastante na legibilidade!

Jacqueline: Sim! Agora faremos o que o Paulo sugeriu: se na busca percebemos que foi digitado "sair", precisamos interromper o processo.

Vamos incluir isso no código utilizando a condicional if para comparar novamente a variável busca do método equalsIgnoreCase() ao texto "sair". Logo abaixo, utilizaremos a declaração break para sair do loop.

// Código suprimido.

        while (!busca.equalsIgnoreCase("sair")) {

            System.out.println("Digite um filme para busca: ");
            busca = leitura.nextLine();

            if(busca.equalsIgnoraCase("sair")){
                break;
            }

// Código suprimido.Copiar código
Paulo: Então a declaração while nunca será ativada, pois enquanto a variável for diferente de "sair", sempre iremos sair em vez de cair na situação da linha de código 23.

Mas tudo bem, conseguimos fazer isso de outras formas, certo?

Jacqueline: Sim, vamos fazer testes para descobrir!

Decidimos então que se for digitado "sair" na primeira vez, não será realizada nenhuma busca.

Agora a nossa ideia é criar uma lista e salvar nela cada título que for possível converter. Vamos criar essa lista de títulos antes da declaração while, para conseguir adicioná-los após a conversão.

Se a lista for criada dentro de while, serão criadas várias listas.

Para criá-la, basta incluir a interface List de Titulo logo abaixo da String busca com valor vazio. Vamos chamá-la de titulos e criar uma nova instância (new) da classe ArrayList.

// Código suprimido.

public class PrincipalComBusca {
    public static void main(String[] args) throws IOException, InterruptedException {
        Scanner leitura = new Scanner(System.in);
        String busca = "";
        List<Titulo> titulos = new ArrayList<>()

        while (!busca.equalsIgnoreCase("sair")) {

// Código suprimido.Copiar código
Em seguida, utilizaremos o atalho "Alt + Enter" para importar a interface List:

// Código suprimido.

import java.util.List;
import java.util.Scanner;

public class PrincipalComBusca {
    public static void main(String[] args) throws IOException, InterruptedException {
        Scanner leitura = new Scanner(System.in);
        String busca = "";
        List<Titulo> titulos = new ArrayList<>()

        while (!busca.equalsIgnoreCase("sair")) {

// Código suprimido.Copiar código
Feito isso, a cada vez que alguém conseguir fazer a busca sem erros e o texto for convertido para título, ele será adicionado à lista titulos que criamos.

Em que momento do código isso acontece?
A partir da classe String endereco na linha de código 35, o programa tenta fazer a busca. Se o texto não passar por nenhum dos blocos catch, significa que a busca foi finalizada corretamente.

Ou seja, quando não ocorre nenhum erro, o programa consegue fazer a inserção na lista.

Paulo: Acredito que podemos deletar a classe FileWriter do arquivo filmes.txt, logo acima dos blocos catch, para evitar trazer mais complexidade para o acompanhamento do código. vamos deletar este bloco de código:

// Código suprimido.

                FileWriter escrita = new FileWriter("filmes.txt");
                escrita.write(meuTitulo.toString());
                escrita.close()

// Código suprimido.Copiar código
Jacqueline: Sim, vamos apagar esse trecho. No lugar dele, vamos utilizar o método add() para inserir o elemento meuTitulo no objeto titulos.

// Código suprimido.

                titulos.add(meuTitulo);
            } catch (NumberFormatException e) {
                System.out.println("Aconteceu um erro: ");
                System.out.println(e.getMessage());
            } catch (IllegalArgumentException e) {
                System.out.println("Algum erro de argumento na busca, verifique o endereço");
            } catch (ErroDeConversaoDeAnoException e) {
                System.out.println(e.getMessage());
            }

        }
        System.out.println("O programa finalizou corretamente!");


    }
}Copiar código
Antes de salvar a lista, vamos imprimi-la para confirmar que o comando funciona corretamente. Para isso, vamos utilizar o objeto System.out, saída padrão do Java.

Na linha de código 69, temos o fechamento de chaves indicando que saímos da declaração while. Abaixo dela, vamos digitar esse objeto contendo o método println().

A instrução System.out.println() irá gerar uma saída de texto. Nesse caso, o texto da lista titulos. Esse deve ser nosso primeiro passo, pois assim já eliminamos um erro.

// Código suprimido.

        }
        System.out.println(titulos)
        System.out.println("O programa finalizou corretamente!");

    }
}Copiar código
Testes
Vamos executar o comando e adicionar 2 títulos para fazer um teste. No Run do arquivo PrincipalComBusca.java, vamos buscar pelos filmes "matrix" e "dogville". Feito isso, podemos digitar "sair" para finalizar a busca:

Run: PrincipalComBusca

> Digite um filme para busca:
> matrix
> https://www.omdbapi.com/?t=matrix&apikey=6585022c
> {"Title":"Matrix","Year":"1993","Rated":"N/A","Released":"01 Mar 1993","Runtime":"60 Min"}
> TituloOmdb[title=Matrix, year=1993, runtime=60 min]
> Titulo já convertido
> nome='Matrix', anoDeLancamento=1993, duração60
> Digite um filme para busca:
> dogville
> https://www.omdbapi.com/?t=dogville&apikey=6585022c
> {"Title":"Dogville","Year":"2003","Rated":"R","Released":"23 Apr 2004","Runtime":"178 Min"}
> TituloOmdb[title=Dogville, year=2003, runtime=17 min]
> Titulo já convertido
> nome='Dogville', anoDeLancamento=2003, duração17
> Digite um filme para busca:
> sair
> [nome='Matrix', anoDeLancamento=1993, duração60, nome='Dogville', anoDeLancamento=2003, duração17]
> O programa finalizou corretamente!
>
> Process finished with exit code 0
Copiar código
Paulo: Porém, retornando ao método toString() no arquivo Titulo.java, podemos identificar uma vírgula que nos engana quando a variável busca for sair.

Jacqueline: De fato, há uma vírgula nesse método, a qual eu deixei o programa criar sozinho.

Paulo: Isso dificulta um pouco a leitura do teste. Seria possível, por exemplo, colocar parênteses ao redor de toda essa informação?

Podemos abrir parênteses antes da variável nome e concatenar após o retorno duracaoEmMinutos. Assim, conseguimos enxergar melhor.

    @Override
    public String toString() {
        return "(nome = '" + nome + '\'' +
                ", anoDeLancamento = " + anoDeLancamento + "," +
                " duração = " + duracaoEmMinutos + ")";
    }
}Copiar código
Vamos executar novamente o código para ver o resultado.

Jacqueline: Note que a IDE colocou aspas simples no comando return, porém elas não são necessárias, então podemos removê-las para deixar o código mais legível.

    @Override
    public String toString() {
        return "(nome = " + nome +
                ", anoDeLancamento = " + anoDeLancamento + "," +
                " duração = " + duracaoEmMinutos + ")";
    }
}Copiar código
Agora podemos executar novamente o arquivo PrincipalComBusca.java e realizar a mesma busca pelos filmes "matrix" e "dogville".

Feito isso, o resultado da busca sair será o seguinte:

Run: PrincipalComBusca

> 
> sair
> [(nome = Matrix, anoDeLancamento = 1993, duração = 60), (nome = Dogville, anoDeLancamento = 2003, duração = 17)]
> O programa finalizou corretamente!
>
> Process finished with exit code 0Copiar código
Conseguimos finalizar a etapa de realizar uma busca e obter o título.

Agora precisamos transformar as informações retornadas em um JSON para salvá-las. Para a lista criada, é necessário declarar a classe FileWriter para imprimir o arquivo titulos.json.

Acima da instrução System.out.println("O programa finalizou corretamente"), vamos declaramos a classe FileWriter de escrita e criaremos uma nova instância chamada filmes.json.

// Código suprimido.

        }
        System.out.println(titulos)

        FileWriter escrita = new FileWriter("filmes.json");

        System.out.println("O programa finalizou corretamente!");

    }
}Copiar código
Em seguida, no momento de aplicar o método write() atribuído ao título escrita, precisamos transformá-lo em String.

Paulo: Sim, pois se colocamos somente titulos no método write(), será chamado o toString() da lista e exibido exatamente o que vimos no println(). Não é isso que nós queremos!

Jacqueline: Exatamente! Nós queremos a lista em .json. Para isso, vamos usar a nossa biblioteca GSON para converter o arquivo.

Da mesma forma que utilizamos o fromJson() para converter de JSON para objetos Java, agora faremos o oposto para transformar a estrutura em JSON.

Para usar o gson precisamos tirar o bloco do Gson gson = new GsonBuilder() de dentro do try. Podemos copiar e colar esse bloco para fora do while.

        Gson gson = new GsonBuilder()
                .setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE)
                .create();Copiar código
Paulo: É a questão do escopo dentro das chaves. Chamamos de variáveis locais ou variáveis temporárias, elas nascem ali e morrem quando fechamos as chaves. A não ser que seja um atributo, que é diferente.

Vamos mover esse bloco já para cima, já que basta ter um desse objeto.

Jacqueline: Jogaremos esse bloco de criação do GsonBuilder para antes da linha do while.

E lá no bloco do FileWriter, onde estávamos escrevendo, vamos fazer um gson.toJson passando a lista de títulos dentro do escrita.write().

// Código suprimido.


        FileWriter escrita = new FileWriter("filmes.json");
        escrita.write(gson.toJson(titulos));
        System.out.println("O programa finalizou corretamente!");

    }
}Copiar código
Paulo: Vamos ver o que sai daí, porque cada formatador de JSON escreve um pouco diferente um do outro, às vezes precisa configurar uns detalhes. E falta fechar o arquivo senão ele não grava o arquivo. Vamos inserir escrita.close():

// Código suprimido.

        FileWriter escrita = new FileWriter("filmes.json");
        escrita.write(gson.toJson(titulos));
        escrita.close()
        System.out.println("O programa finalizou corretamente!");

    }
}Copiar código
Testando conversão para JSON
Vamos executar o código para ver oque será feito. De novo, na busca vou inserir o "dogville" e, depois, o "matrix". Em seguida, vou sair da aplicação.

Ele imprimiu corretamente no console e informou que o programa foi finalizado corretamente. Agora, vamos verificar na estrutura de pastas e arquivos do projeto se ele gerou um arquivo JSON.

Sim, ele salvou um arquivo chamado filmes.json. Podemos dar um duplo clique no mouse para abrir esse arquivo e veremos a estrutura do JSON com as informações dos filmes escolhidos. Um formato de array:

[{"Nome":"Dogville", "AnoDeLancamento":2003, "IncluidoNoPlano":false, "SomaDasAvaliacoes":0.0, "TotalDeAvaliacoes":0, "DuracaoEmMinutos":17}, {"Nome":"Matrix", "AnoDeLancamento":1993, "IncluidoNoPlano":false, "SomaDasAvaliacoes":0.0, "TotalDeAvaliacoes":0, "DuracaoEmMinutos":60}Copiar código
Paulo: Como eu falei, com colchetes, depois chaves, e inseriu dados que nós nem populamos. Fecha chaves, vírgula, e começa as informações de outro array, no caso referente às informações do filme Matrix.

Esse formato de chaves, vírgula e dois pontos é o formato de um JSON que nossa biblioteca GSON soube serializar, ou seja, converter o objeto em texto, em formato transmissível pela internet.

Jacqueline: Existe um recurso que formata esse texto para que ele seja impresso na tela de forma mais bonita.

Paulo: Eu imaginei que tivesse. Deve ter alguma configuração como .pretty, por exemplo.

Jacqueline: Inclusive, podemos incluir no GsonBuilder um .setPrettyPrinting().

        Gson gson = new GsonBuilder()
                .setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE)
                .setPrettyPrinting()
                .create();Copiar código
Paulo: Agora temos um conversor de JSON com uma configuração a mais. Vai mudar o formato da impressão.

Jacqueline: Vamos executar a aplicação e fazer o mesmo procedimento. Agora, quando abrirmos o JSON que foi criado, já mostra com outra formatação:

[
 {
 "Nome": "Matrix",
 "AnoDeLancamento": 1993,
 "IncluidoNoPlano": false,
 "SomaDasAvaliacoes": 0.0,
 "TotalDeAvaliacoes": 0,
 "DuracaoEmMinutos": 60
 },

 {
 "Nome": "Dogville",
 "AnoDeLancamento": 2003,
 "IncluidoNoPlano": false,
 "SomaDasAvaliacoes": 0.0,
 "TotalDeAvaliacoes": 0,
 "DuracaoEmMinutos": 17
 }, 
]Copiar código
Paulo: Uma sintaxe mais fácil para o ser humano entender e verificarmos se faz sentido.

Jacqueline: Olha que legal. Poderíamos trocar arquivos com as listas dos filmes que mais gostamos. Ler as sugestões. Conseguimos manipular e fazer bastante coisa bacana.

Paulo: Depois, esse poderia ser o arquivo que o que o Front-End vai consumir. O Java é muito usado no Back-End de sistemas atrás de Servlet, do Spring, em Cloud, para se comunicar com o Front-End que pode estar escrito em React, Angular, Vue ou JavaScript puro.

No JavaScript puro, o React sabe pegar esse arquivo JSON e colocar de forma muito bonita. Inclusive, naquele OMDB que vimos, tinha uma API só de imagens, para pegar o pôster dos filmes.

Poderíamos pegar o pôster, inserir o link aqui e gerar lá no Front-End.

Neste curso estamos mostrando passos importantes e reais do desenvolvimento, que estão conectados com desenvolvimento web, desenvolvimento de microsserviços e um pouco de base de dados.

Todos os princípios de raciocínio, de como construir uma aplicação código em cima de código, aqui nós abordamos muito bem.

Note que não queremos que você decore os detalhes que usamos no código. Isso acontece naturalmente, com a prática você ganhará fluência e vai saber onde estão as coisas, como as coisas se conectam.

Mas agora, o importante é entender sobre os objetos, exceptions, interfaces, quem é filha de quem, como os métodos funcionam, o que pode afetar o funcionamento da aplicação.

Tudo o que aprendemos nessa formação, será muito útil porque você conseguirá aplicar esse raciocínio em outros contextos.

Por isso essa formação tem essa cara de trazer praticidade ensinando esses conceitos de orientação a objetos, do Java em si, das características mais interessantes da linguagem e do ecossistema, um pouco de IDE, um pouco de como funciona o JAR, como funciona a documentação, como buscar uma biblioteca, tudo isso é fundamental no nosso dia a dia.

Jacqueline: Exatamente. Essa é a ideia! Espero que você tenha se encantado pelo Java e pela orientação a objetos, e por tudo o que nós vimos durante a formação.

Você viu que pesquisando, olhando a documentação, é possível resolver problemas e modificar o que quisermos.

E fica como desafio melhorar essa aplicação que nós fizemos.

Por exemplo, não é ideal ter o código todo no main, como separaríamos as responsabilidades nesse código?

Vamos trazer mais alguns desafios para você, faça os exercícios, compartilhe seus projetos conosco, coloque suas dúvidas no fórum, se não tiver dúvidas pode ajudar as outras pessoas no fórum ou dar sugestões.

Espero que você tenha curtido esse curso!

E, Paulo, muito obrigado por me acompanhar. Foi incrível gravar com você!

Paulo: Que legal, Jaque! Agora, o importante é que queremos que você faça e organize esse código que ainda não está bonito, devemos pensar em como organizar as classes por responsabilidades. Esse é um exercício saudável para você, e não existe uma única resposta certa.

Use isso no seu portfólio, compartilhe no LinkedIn e no seu GitHub.

Esperamos você em uma próxima formação, para que você se aprofunde naquilo que você faz e tenha realmente domínio das suas ferramentas.

É normal copiar e colar código, até fizemos isso durante o curso. Mas é importante entender a essência e dominar o que está acontecendo. Para isso, você precisa de prática.

Até a próxima e bons estudos!
