Exploramos a importância do bloco try/catch para o tratamento adequado de exceptions, reconhecendo a diversidade de situações em que diferentes tipos de exceptions podem surgir no código. Além disso, compreendemos a necessidade de criar exceptions personalizadas para lidar com casos específicos.

Agora, propomos uma lista de atividades práticas (não obrigatórias) para reforçar esses conceitos na prática. Pronto para mergulhar nessas atividades e aprimorar suas habilidades?

Crie um programa simples que solicita dois números ao usuário e realiza a divisão do primeiro pelo segundo. Utilize o bloco try/catch para tratar a exceção que pode ocorrer caso o usuário informe 0 como divisor.
Crie um programa que lê uma senha do usuário. Utilize o bloco try/catch para capturar a exceção SenhaInvalidaException, uma classe de exceção personalizada que deve ser lançada caso a senha não atenda a critérios específicos (por exemplo, ter pelo menos 8 caracteres).
Desenvolva um programa em Java que permite aos usuários consultar informações sobre um usuário do GitHub (utilize a API pública do GitHub para obter os dados). Crie uma classe de exceção personalizada, ErroConsultaGitHubException, que estende RuntimeException. Lance essa exceção quando o nome de usuário não for encontrado. No bloco catch, trate de forma específica essa exceção, exibindo uma mensagem amigável.
