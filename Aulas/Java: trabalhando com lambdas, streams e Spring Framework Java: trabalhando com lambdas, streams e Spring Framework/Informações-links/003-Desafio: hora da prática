Continuamos explorando os streams do Java, agora focando na produção de estatísticas. Esse tipo de informação é bastante útil no dia a dia do desenvolvimento de software, quando precisamos produzir relatórios, por exemplo.

Para mergulhar ainda mais nesse conhecimento, preparamos mais uma lista de exercícios. Praticar é muito importante para reforçar suas habilidades! :)

1 - Dada a lista de números inteiros a seguir, encontre o maior número dela.

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(10, 20, 30, 40, 50);

        // código do agrupamento
    }
}
Copiar código
2 -Dada a lista de palavras (strings) abaixo, agrupe-as pelo seu tamanho. No código a seguir, há um exemplo prático do resultado esperado.

public class Main {
    public static void main(String[] args) {
        List<String> palavras = Arrays.asList("java", "stream", "lambda", "code");

        // código do agrupamento

        // Resultado Esperado: {4=[java, code], 6=[stream, lambda]}
    }
}
Copiar código
3 - Dada a lista de nomes abaixo, concatene-os separados por vírgula. No código a seguir, há um exemplo prático do resultado esperado.

public class Main {
    public static void main(String[] args) {
        List<String> nomes = Arrays.asList("Alice", "Bob", "Charlie");
        // código do agrupamento de dados

        // Resultado Esperado: "Alice, Bob, Charlie"
    }
}
Copiar código
4 - Dada a lista de números inteiros abaixo, calcule a soma dos quadrados dos números pares.

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(1, 2, 3, 4, 5, 6);
        // código da filtragem e agrupamento dos dados
    }
}
Copiar código
5 - Dada uma lista de números inteiros, separe os números pares dos ímpares.

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(1, 2, 3, 4, 5, 6);
        // código do particionamento da lista
    }
}
Copiar código
Nos próximos exercícios, iremos usar o mesmo código base, dado a seguir:

Você tem uma lista de objetos do tipo Produto, onde cada produto possui os atributos nome (String), preco (double) e categoria (String). Filtre todos os produtos da categoria "Eletrônicos" com preço menor que R$ 1000, ordene-os pelo preço em ordem crescente e colete o resultado em uma nova lista.

Produto.java

public class Produto {
    private String nome;
    private double preco;
    private String categoria;

    public Produto(String nome, double preco, String categoria) {
        this.nome = nome;
        this.preco = preco;
        this.categoria = categoria;
    }

    public String getNome() {
        return nome;
    }

    public double getPreco() {
        return preco;
    }

    public String getCategoria() {
        return categoria;
    }

    @Override
    public String toString() {
        return "Produto{" +
               "nome='" + nome + '\'' +
               ", preco=" + preco +
               ", categoria='" + categoria + '\'' +
               '}';
    }
}
Copiar código
Main.java

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = Arrays.asList(
            new Produto("Smartphone", 800.0, "Eletrônicos"),
            new Produto("Notebook", 1500.0, "Eletrônicos"),
            new Produto("Teclado", 200.0, "Eletrônicos"),
            new Produto("Cadeira", 300.0, "Móveis"),
            new Produto("Monitor", 900.0, "Eletrônicos"),
            new Produto("Mesa", 700.0, "Móveis")
        );

        // código usando streams
    }
}
Copiar código
6 - Dada a lista de produtos acima, agrupe-os por categoria em um Map<String, List<Produto>>.

7 - Dada a lista de produtos acima, conte quantos produtos há em cada categoria e armazene em um Map<String, Long>.

8 - Dada a lista de produtos acima, encontre o produto mais caro de cada categoria e armazene o resultado em um Map<String, Optional<Produto>>.

9 - Dada a lista de produtos acima, calcule o total dos preços dos produtos em cada categoria e armazene o resultado em um Map<String, Double>.

Ver opinião do instrutor
Opinião do instrutor

Aqui temos algumas sugestões de implementação. Caso tenha feito de forma diferente, levante a discussão no fórum! Coloque sua solução por lá e discuta com a comunidade sobre as melhores formas de implementação :)

1 - Encontrando o maior valor

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(10, 20, 30, 40, 50);
        Optional<Integer> max = numeros.stream()
                                       .max(Integer::compare);
        max.ifPresent(System.out::println); // Esperado: 50
    }
}
Copiar código
2 - Agrupando strings pelo tamanho

public class Main {
    public static void main(String[] args) {
        List<String> palavras = Arrays.asList("java", "stream", "lambda", "code");
        Map<Integer, List<String>> agrupamento = palavras.stream()
                                                         .collect(Collectors.groupingBy(String::length));
        System.out.println(agrupamento); 
        // Esperado: {4=[java, code], 6=[stream, lambda]}
    }
}
Copiar código
3 - Concatenando elementos da lista

public class Main {
    public static void main(String[] args) {
        List<String> nomes = Arrays.asList("Alice", "Bob", "Charlie");
        String resultado = nomes.stream()
                                .collect(Collectors.joining(", "));
        System.out.println(resultado); // Esperado: "Alice, Bob, Charlie"
    }
}
Copiar código
4 - Reduzindo uma lista de inteiros

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(1, 2, 3, 4, 5, 6);
        int somaDosQuadrados = numeros.stream()
                                      .filter(n -> n % 2 == 0)
                                      .map(n -> n * n)
                                      .reduce(0, Integer::sum);
        System.out.println(somaDosQuadrados); // Esperado: 56 (4 + 16 + 36)
    }
}

Copiar código
5 - Particionando números ímpares e pares

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(1, 2, 3, 4, 5, 6);
        Map<Boolean, List<Integer>> particionado = numeros.stream()
                                                          .collect(Collectors.partitioningBy(n -> n % 2 == 0));
        System.out.println("Pares: " + particionado.get(true));  // Esperado: [2, 4, 6]
        System.out.println("Ímpares: " + particionado.get(false)); // Esperado: [1, 3, 5]
    }
}
Copiar código
6 - Agrupando produtos por categoria

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = Arrays.asList(
            new Produto("Smartphone", 800.0, "Eletrônicos"),
            new Produto("Notebook", 1500.0, "Eletrônicos"),
            new Produto("Mesa", 700.0, "Móveis"),
            new Produto("Cadeira", 300.0, "Móveis"),
            new Produto("Fone de Ouvido", 100.0, "Eletrônicos"),
            new Produto("Caneta", 5.0, "Papelaria")
        );

        Map<String, List<Produto>> produtosPorCategoria = produtos.stream()
            .collect(Collectors.groupingBy(Produto::getCategoria));

        System.out.println(produtosPorCategoria);
    }
}
Copiar código
7 - Quantidade de produtos por categoria

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = Arrays.asList(
            new Produto("Smartphone", 800.0, "Eletrônicos"),
            new Produto("Notebook", 1500.0, "Eletrônicos"),
            new Produto("Mesa", 700.0, "Móveis"),
            new Produto("Cadeira", 300.0, "Móveis"),
            new Produto("Fone de Ouvido", 100.0, "Eletrônicos"),
            new Produto("Caneta", 5.0, "Papelaria")
        );

        Map<String, Long> contagemPorCategoria = produtos.stream()
        .collect(Collectors.groupingBy(Produto::getCategoria, Collectors.counting()));

        System.out.println(contagemPorCategoria);
    }
}
Copiar código
8 - Obtendo o produto mais caro de cada categoria

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = Arrays.asList(
            new Produto("Smartphone", 800.0, "Eletrônicos"),
            new Produto("Notebook", 1500.0, "Eletrônicos"),
            new Produto("Mesa", 700.0, "Móveis"),
            new Produto("Cadeira", 300.0, "Móveis"),
            new Produto("Fone de Ouvido", 100.0, "Eletrônicos"),
            new Produto("Caneta", 5.0, "Papelaria")
        );

        Map<String, Optional<Produto>> maisCaroPorCategoria = produtos.stream()
            .collect(Collectors.groupingBy(Produto::getCategoria,
        Collectors.maxBy(Comparator.comparingDouble(Produto::getPreco))));

        System.out.println(maisCaroPorCategoria);

    }
}
Copiar código
9 - Soma dos valores por categoria

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = Arrays.asList(
            new Produto("Smartphone", 800.0, "Eletrônicos"),
            new Produto("Notebook", 1500.0, "Eletrônicos"),
            new Produto("Mesa", 700.0, "Móveis"),
            new Produto("Cadeira", 300.0, "Móveis"),
            new Produto("Fone de Ouvido", 100.0, "Eletrônicos"),
            new Produto("Caneta", 5.0, "Papelaria")
        );

        Map<String, Double> somaPrecoPorCategoria = produtos.stream()
        .collect(Collectors.groupingBy(Produto::getCategoria,
        Collectors.summingDouble(Produto::getPreco)));

        System.out.println(somaPrecoPorCategoria);
    }
}
