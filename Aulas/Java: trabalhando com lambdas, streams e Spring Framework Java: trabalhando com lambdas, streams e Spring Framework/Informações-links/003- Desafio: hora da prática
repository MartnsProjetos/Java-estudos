Conhecemos a API de streams do Java, que usa bastante o conceito de expressões lambda para realizar várias operações encadeadas em coleções. Saber distinguir os diversos métodos dos streams Java permite que sejamos capazes de resolver cada vez mais problemas na programação.

Vamos colocar mais métodos dos streams em prática? Dica: caso não se lembre de nenhum método usado em vídeo, pesquise na documentação . Você também pode usar ferramentas de IA para auxiliar a descobrir qual o melhor método a ser utilizado.

1 - Dada a lista de números inteiros abaixo, filtre apenas os números pares e imprima-os.

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(1, 2, 3, 4, 5, 6);
        // código para filtragem.
    }
}
Copiar código
2 - Dada a lista de strings abaixo, converta todas para letras maiúsculas e imprima-as.

public class Main {
    public static void main(String[] args) {
        List<String> palavras = Arrays.asList("java", "stream", "lambda");
        // código para conversão
    }
Copiar código
3 - Dada a lista de números inteiros abaixo, filtre os números ímpares, multiplique cada um por 2 e colete os resultados em uma nova lista.

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(1, 2, 3, 4, 5, 6);
        // código para filtragem e coleta
    }
Copiar código
4 - Dada a lista de strings abaixo, remova as duplicatas (palavras que aparecem mais de uma vez) e imprima o resultado.

public class Main {
    public static void main(String[] args) {
        List<String> palavras = Arrays.asList("apple", "banana", "apple", "orange", "banana");
        // código da filtragem 
    }
}
Copiar código
5 - Dada a lista de sublistas de números inteiros abaixo, extraia todos os números primos em uma única lista e os ordene em ordem crescente.

public class Main {
    public static void main(String[] args) {
        List<List<Integer>> listaDeNumeros = Arrays.asList(
            Arrays.asList(1, 2, 3, 4),
            Arrays.asList(5, 6, 7, 8),
            Arrays.asList(9, 10, 11, 12)
        );

    //código para filtrar e ordenar números primos
    }
}
Copiar código
6 - Dado um objeto Pessoa com os campos nome e idade, filtre as pessoas com mais de 18 anos, extraia os nomes e imprima-os em ordem alfabética. A classe Pessoa está definida abaixo.

Pessoa.java

public class Pessoa {
    String nome;
    int idade;

    Pessoa(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    public String getNome() {
        return nome;
    }

    public int getIdade() {
        return idade;
    }
}
Copiar código
Main.java

public class Main {
    public static void main(String[] args) {
        List<Pessoa> pessoas = Arrays.asList(
            new Pessoa("Alice", 22),
            new Pessoa("Bob", 17),
            new Pessoa("Charlie", 19)
        );

    // código para filtrar pessoas
    }
}
Copiar código
7 - Você tem uma lista de objetos do tipo Produto, onde cada produto possui os atributos nome (String), preco (double) e categoria (String). Filtre todos os produtos da categoria "Eletrônicos" com preço menor que R$ 1000, ordene-os pelo preço em ordem crescente e colete o resultado em uma nova lista.

Produto.java

public class Produto {
    private String nome;
    private double preco;
    private String categoria;

    public Produto(String nome, double preco, String categoria) {
        this.nome = nome;
        this.preco = preco;
        this.categoria = categoria;
    }

    public String getNome() {
        return nome;
    }

    public double getPreco() {
        return preco;
    }

    public String getCategoria() {
        return categoria;
    }

    @Override
    public String toString() {
        return "Produto{" +
               "nome='" + nome + '\'' +
               ", preco=" + preco +
               ", categoria='" + categoria + '\'' +
               '}';
    }
}
Copiar código
Main.java

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = Arrays.asList(
            new Produto("Smartphone", 800.0, "Eletrônicos"),
            new Produto("Notebook", 1500.0, "Eletrônicos"),
            new Produto("Teclado", 200.0, "Eletrônicos"),
            new Produto("Cadeira", 300.0, "Móveis"),
            new Produto("Monitor", 900.0, "Eletrônicos"),
            new Produto("Mesa", 700.0, "Móveis")
        );

        // código para filtrar os produtos
    }
}
Copiar código
8 - Tomando o mesmo código do exercício anterior como base, modifique o código para que a saída mostre apenas os três produtos mais baratos da categoria "Eletrônicos".

Ver opinião do instrutor
Opinião do instrutor

Aqui temos algumas sugestões de implementação. Caso tenha feito de forma diferente, levante a discussão no fórum! Coloque sua solução por lá e discuta com a comunidade sobre as melhores formas de implementação :)

1 - Filtrando números pares

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(1, 2, 3, 4, 5, 6);
        numeros.stream()
               .filter(n -> n % 2 == 0)
               .forEach(System.out::println); // Esperado: 2, 4, 6
    }
}
Copiar código
2 - Convertendo strings para maiúsculas

public class Main {
    public static void main(String[] args) {
        List<String> palavras = Arrays.asList("java", "stream", "lambda");
        palavras.stream()
                .map(String::toUpperCase)
                .forEach(System.out::println); // Esperado: JAVA, STREAM, LAMBDA
    }
}
Copiar código
3 - Encadeando operações em uma lista

public class Main {
    public static void main(String[] args) {
        List<Integer> numeros = Arrays.asList(1, 2, 3, 4, 5, 6);
        List<Integer> resultado = numeros.stream()
                                         .filter(n -> n % 2 == 1)
                                         .map(n -> n * 2)
                                         .collect(Collectors.toList());
        System.out.println(resultado); // Esperado: [2, 6, 10]
    }
}
Copiar código
4 - Filtrando dados duplicados

public class Main {
    public static void main(String[] args) {
        List<String> palavras = Arrays.asList("apple", "banana", "apple", "orange", "banana");
        List<String> unicas = palavras.stream()
                                      .distinct()
                                      .collect(Collectors.toList());
        System.out.println(unicas); // Esperado: [apple, banana, orange]
    }
}
Copiar código
5 - Filtrando e ordenando números primos

public class Main {
    public static void main(String[] args) {
        List<List<Integer>> listaDeNumeros = Arrays.asList(
            Arrays.asList(1, 2, 3, 4),
            Arrays.asList(5, 6, 7, 8),
            Arrays.asList(9, 10, 11, 12)
        );

        List<Integer> numerosPrimos = listaDeNumeros.stream()
                                                    .flatMap(List::stream)  // Achatar as sublistas em uma única stream
                                                    .filter(Main::ehPrimo)  // Filtrar apenas números primos
                                                    .sorted()               // Ordenar em ordem crescente
                                                    .collect(Collectors.toList()); // Coletar em uma lista

        System.out.println(numerosPrimos); // Saída esperada: [2, 3, 5, 7, 11]
    }

    // Função para verificar se um número é primo
    private static boolean ehPrimo(int numero) {
        if (numero < 2) return false; // Números menores que 2 não são primos
        for (int i = 2; i <= Math.sqrt(numero); i++) {
            if (numero % i == 0) {
                return false; // Divisível por outro número que não 1 e ele mesmo
            }
        }
        return true;
    }
}
Copiar código
6 - Filtrando pessoas

public class Main {
   public static void main(String[] args) {
       List<Pessoa> pessoas = Arrays.asList(
           new Pessoa("Alice", 22),
           new Pessoa("Bob", 17),
           new Pessoa("Charlie", 19)
       );

       pessoas.stream()
              .filter(p -> p.getIdade() > 18)
              .map(Pessoa::getNome)
              .sorted()
              .forEach(System.out::println); // Esperado: "Alice", "Charlie"
   }
}
Copiar código
7 - Filtrando produtos

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = Arrays.asList(
            new Produto("Smartphone", 800.0, "Eletrônicos"),
            new Produto("Notebook", 1500.0, "Eletrônicos"),
            new Produto("Teclado", 200.0, "Eletrônicos"),
            new Produto("Cadeira", 300.0, "Móveis"),
            new Produto("Monitor", 900.0, "Eletrônicos"),
            new Produto("Mesa", 700.0, "Móveis")
        );

        List<Produto> produtosFiltrados = produtos.stream()
                                                  .filter(p -> p.getCategoria().equals("Eletrônicos")) // Filtrar pela categoria
                                                  .filter(p -> p.getPreco() < 1000)                   // Filtrar pelo preço
                                                  .sorted((p1, p2) -> Double.compare(p1.getPreco(), p2.getPreco())) // Ordenar pelo preço
                                                  .collect(Collectors.toList()); // Coletar em uma lista

        System.out.println(produtosFiltrados);
    }
}
Copiar código
8 - Limitando o número de produtos

public class Main {
    public static void main(String[] args) {
        List<Produto> produtos = Arrays.asList(
            new Produto("Smartphone", 800.0, "Eletrônicos"),
            new Produto("Notebook", 1500.0, "Eletrônicos"),
            new Produto("Teclado", 200.0, "Eletrônicos"),
            new Produto("Cadeira", 300.0, "Móveis"),
            new Produto("Monitor", 900.0, "Eletrônicos"),
            new Produto("Mesa", 700.0, "Móveis")
        );

        List<Produto> produtosMaisBaratos = produtos.stream()
                                                    .filter(p -> p.getCategoria().equals("Eletrônicos")) // Filtrar pela categoria
                                                    .filter(p -> p.getPreco() < 1000)                   // Filtrar pelo preço
                                                    .sorted((p1, p2) -> Double.compare(p1.getPreco(), p2.getPreco())) // Ordenar pelo preço
                                                    .limit(3)                                           // Pegar os 3 primeiros
                                                    .collect(Collectors.toList());                     // Coletar em uma lista

        System.out.println(produtosMaisBaratos);
    }
}
