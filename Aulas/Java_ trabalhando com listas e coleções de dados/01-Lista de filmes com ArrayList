ğŸ”¹ 1. OrganizaÃ§Ã£o do Projeto
Projeto Screen Match: sistema de streaming com filmes e sÃ©ries.

Classes utilizadas:

Titulo (superclasse com nome, duraÃ§Ã£o, ano).

Filme e Serie (subclasses que herdam de Titulo).

CalculadoraDeTempo (para avaliaÃ§Ã£o).

Principal (ponto de execuÃ§Ã£o do programa).

ğŸ”¹ 2. CriaÃ§Ã£o de Objetos
Criou instÃ¢ncias de Filme e Serie:

Ex: Filme filmeDoPaulo = new Filme();

Usou mÃ©todos como:

setNome()

setDuracaoEmMinutos()

setAnoDeLancamento()

avalia()

ğŸ”¹ 3. Uso do var
O var permite inferÃªncia de tipo:

var filmeDoPaulo = new Filme();

Mesmo com var, o tipo continua sendo fixo (nÃ£o pode mudar depois).

ğŸ”¹ 4. IntroduÃ§Ã£o Ã s Listas com ArrayList
Uso da classe ArrayList do pacote java.util:

ArrayList<Filme> listaDeFilmes = new ArrayList<>();

AdiÃ§Ã£o de elementos com add():

java
Copiar
Editar
listaDeFilmes.add(filmeDoPaulo);
listaDeFilmes.add(meuFilme);
listaDeFilmes.add(outroFilme);
ğŸ”¹ 5. ManipulaÃ§Ã£o da Lista
Obteve tamanho da lista com .size():

System.out.println("Tamanho da lista: " + listaDeFilmes.size());

Acessou elementos com .get():

listaDeFilmes.get(0).getNome(); â†’ retorna o nome do primeiro filme.

Aprendeu que mÃ©todos podem ser encadeados: lista.get().getNome()

ğŸ”¹ 6. Boas prÃ¡ticas e curiosidades
Nomes de variÃ¡veis devem ser claros no aprendizado, mas no mundo real sÃ£o mais curtos.

Em Java, listas comeÃ§am na posiÃ§Ã£o 0.

Diferente de outras linguagens como Python, Java Ã© fortemente tipado e mais verboso.

Java usa o paradigma de orientaÃ§Ã£o a objetos de forma intensa.
